// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DB_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  exercise      Exercise[]
  schedule      Schedule[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([sessionToken])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique @db.Text
  expiresAt DateTime

  @@unique([email, token])
}

model Exercise {
  id           String        @id @default(uuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(references: [id], fields: [userId], onDelete: Cascade)
  schedule     Schedule[]
  exerciseSets ExerciseSet[]
}

model Schedule {
  id           String        @id @default(uuid())
  exerciseId   String
  exercise     Exercise      @relation(references: [id], fields: [exerciseId], onDelete: Cascade)
  date         DateTime
  userId       String
  user         User          @relation(references: [id], fields: [userId], onDelete: Cascade)
  exerciseSets ExerciseSet[]
}

model ExerciseSet {
  id                String @id @default(uuid())
  weight            Int?
  completedWeight   Int?
  reps              Int?
  completedReps     Int?
  duration          Int?
  completedDuration Int?
  rpe               Int?
  order             Int

  exerciseId String
  exercise   Exercise @relation(references: [id], fields: [exerciseId], onDelete: Cascade)

  scheduleId String
  shedule    Schedule @relation(references: [id], fields: [scheduleId], onDelete: Cascade)

  @@unique([order, scheduleId])
}
